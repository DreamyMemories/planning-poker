// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: players.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (id, name, game_id, value, created_at)
VALUES ($1, $2, $3, 0, $4)
RETURNING id, name, game_id, value, created_at
`

type CreatePlayerParams struct {
	ID        uuid.UUID
	Name      string
	GameID    uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer,
		arg.ID,
		arg.Name,
		arg.GameID,
		arg.CreatedAt,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerByID = `-- name: GetPlayerByID :one
SELECT id, name, game_id, value, created_at FROM players WHERE id = $1
`

func (q *Queries) GetPlayerByID(ctx context.Context, id uuid.UUID) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameID,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
